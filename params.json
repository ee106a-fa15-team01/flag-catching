{"name":"Flag catching","tagline":"Final project for EE 106A Fall 2015","body":"# Introduction\r\n\r\n## End goals\r\n\r\nThe runner Zumy should reach the goal and return to its home region afterward without touched by the chaser Zumy. For chaser     Zumy, to catch the runner is the only thing it has to do.\r\n\r\nThat is, the goal for the runner is first the flag then the home region. At the same time, the chaser is an obstacle for it. Vice and versa, the runner is the goal for the chaser and the other chasers are obstacles for it.\r\npic 2 and pic 3 here (parallel would be nice)\r\n\r\nThe runner should be able to identify and also locate the goal, home region and the point where the chaser locates at. Based on these information, we can calculate the potential field for the current location. By comparing the magnitude of the potential field we got from the function, the latest coordinate for next step can be found. \r\n\r\nBy comparing the current location of the Zumy seen by the camera with the new coordinate for next step, we can assign the Zumy toward that point till it reaches the point.\r\n\r\nSince all the chaser are designed to avoid other chasers, it tends to approach the runner from different directions which could make them easier to win compared to the runner.\r\n\r\n## Why is it interesting? \r\n\r\nThe idea is based on a video game called pac-man. It would be an interesting game base on the reason that many unpredictable elements in the real world may affect the game result which could barely be observed only by coding. Besides, we can add more than one chaser in this game and to see how the runner escapes from of be caught by them.\r\n\r\nAnother interesting part for this project is the implementation of potential field hence optimize our controlling on path planning. For this part, we modify our ways of calculating the potential field over and over again by observing the real results happened on the game field. \r\n\r\nThe problems we have to solve are listed below:\r\n1. How to avoid obstacles and move to objects?\r\n2. How to locate each objects seen in either the camera frame or ground frame?\r\n3. How to control the Zumys well during the game?\r\n\r\n## Applications in real-world\r\n\r\n1. Highly-autonomous cars\r\n2. Increase human safety:  \r\n  Automatic industrial fork truck (trucks with a function of picking up goods at a given location or carry it back to an    assigned home region. The trucks should be able to avoid other trucks and people during the task).\r\n3. Autonomous constructional vehicles which pedrail wheels are used for   them, so they tend to have similar moving pattern to Zumy due to the friction conditions. Based on this, the way of controlling the pedrail system should be similar).\r\n\r\n# Design\r\n\r\n## Design criteria\r\n\r\n### Hardware constructions\r\n1. If N Zumys are set in the game, N+3 AR tags in total( +3 each stands for the origin, the goal and one for boundary need) are needed.\r\nc 4 here\r\n2. The game field must be smaller than 90 (cm) x 105 (cm) regarding to the limitation of camera vision.\r\n3. To minimize the errors of coordinate recognition, the camera are set to be on the right top of the origin AR tag\r\n4. Fully charged batteries for Zumys is desirable in order to solve the problem caused by velocity differences between Zumys, but it has been solved by using PID controller on Zumy\r\n5. All the AR tags should be recognized well by the camera all the time\r\n\r\n### Coordinate transform\r\n\r\n1. Scale the real world ground into a virtual grid\r\n2. Using the camera to locate all the Zumys\r\n3. Coordinate transform is completed by the tf. lookup transform which transforms the coordinate seen from the camera to the ground coordinate. \r\n4. Ground frame is formed by placing an AR tag on the ground and set it to be the reference origin for this frame\r\n\r\n### Complete path planning by using potential field method\r\n\r\n1. Using the following function in our code:\r\n  U_obstacle=(1/√(1+〖dist(q,obstacle)〗^6 ))^2 dist(q, goal)^2, when p > dist(q, obstacle)\r\n  U_obstacle = 0                              , when p < dist(q, obstacle)\r\nhere\r\n2. Make the potential field into a readable window which can show us the current potential field value for each current location. \r\n pic 6 here\r\n\r\n## Design we chose\r\n\r\n### Hardware constructions\r\n\r\n\"Zumy\" is the robot we’re using in this project. It’s provided by EECS department in UC, Berkeley.  \r\n pic 7 here\r\n\r\n### Coordinate transform\r\n\r\nThere are two ways to fulfill this part. The first one is using the camera on the Zumy itself. Difficulty is that it’s hard to locate every single Zumy in the world frame unless we have a visual map for them. The method we chose is based on using AR tags and one camera. It’s much simpler than the first one. \r\n\r\n### Construct path planning by constructing a virtual potential field\r\n\r\nWe chose potential field instead of optimal control. One reason is potential field is easier to understand. The smaller the value of it, the higher preference for the object moving to it. The other reason is that we didn’t add cost and punishment to the steps the Zumy takes, so there’s no need to use other methods to do the motion planning. That is, potential field is a contrarily easier way for us to accomplish our design goals in an efficient way.\r\n\r\n### About applying discrete or continuous time\r\n\r\nAs mentioned in the previous page, we scale the ground into grids which means the Zumys will move in a discrete way. In other words, Zumys will have to reach each current desired point or it won’t be able to do the next path planning. On the other hand, there’s a continuous time method. In this way, the Zumy will have a non-stop motion which means it can move faster. The problem is that it would cause location errors in the end which is hard to adjust. This problem is basically caused by hardware limitation, such as drifting problems. It happens especially when the velocity changes from angular to linear.    \r\n\r\n## Impactions Encountered\r\n\r\n1. The runner Zumy got trapped by the local minima (minimum potential field value) which means it will stay in that current location all the time.\r\nIf we got a video here!!!!! \r\n2. The direction of moving objects aren’t taken into account. It may be an efficient way.\r\n3. Errors caused by the hardware, such as camera and Zumys.\r\n4. The method of controlling we’re using is discrete in time which means if the Zumy got trapped in a step (caused by reasons 1.), it won’t be able to do the next path planning (it stops) and caught by the chasers.\r\n\r\n# Implementation\r\n\r\n## Hardware description\r\n\r\npic 8\r\n\r\n## Code detail (diagram, flow charts, launch files, URDF….)\r\n\r\n## Describe complete system work\r\n\r\n(rqt_graph) pic 9 here \r\nZumy 5a is the runner; Zumy 1b and 1c are the catchers (three Zumys in total).\r\ntf delivers the coordinates of the AR tags ( Zumys, origin and goal) to 5a,1b,1c. \r\n\r\nThe chaser Zumys are all sharing the same module to calculate the potential value while the runner Zumy only calculate its own potential field.\r\n\r\nAfter the calculation, the grid with the smallest potential value will be chose as the next desired coordinate.\r\n\r\nAfter knowing the next assigned point, the Zumys all share the same controlling code. The camera information is included in the code, so the Zumys can move to the next point according to the coordinate information. After finishing each step, coordinates will be evaluated to see if it’s already caught the flag or not. Either side who win the game will publish a \"game over\" message to the game status topic. All the Zumys are subscribed to this game status topic, so all the velocity commands on the Zummys will become zero (it stops).\r\n\r\n# Results\r\n\r\n## Coordinate transform\r\n\r\nIt works quite well after we put an AR tag as a referenced origin. Of course adjust the camera configuration will minimize the error. Also, a filter is wrote in the code for Zumys to get rid of way-off information given from the camera.\r\n\r\n## Complete path planning by using potential field method\r\n\r\nIn order to have a better insight of the parameters in the function we’re using. We test it out and then observe the result. The effective range of the obstacles can be adjusted by increasing or decreasing the parameters in the function. The function fits any situation now.\r\n\r\n## Motion of the Zummy\r\n\r\nTo improve the motion of Zumys and solve the problem list previously (problem 4.), a forward linear velocity is added to steps with pure rotation.  \r\n\r\n## Final Video, picture\r\n\r\n# Conclusion\r\n\r\n1. Most of the coordinate errors have been eliminated.\r\n2. The extra linear velocity added to the pure rotations doesn’t seem to be obvious. The reason is because of the scale for each grid is not big enough for us to see the curve path it performs. However, it keeps Zumys from trapping. \r\n3. The function we’re using for calculating the potential field has been modified quite well. The runner can move forward to the flag and avoiding the chasers well at the same time. \r\nhe performances of the chasers are good enough to catch the runner and keeps itself from crashing into other chasers.\r\n4. We are able to stop the Zumy correctly by using the \"game over\" topic.\r\n\r\n## Particular difficulties\r\n\r\n1. Zumys lose connection to computers easily. \r\n2. Better way of controlling the velocity of the Zumy.\r\n3. The axis saw on rviz was flipping all the time because of the errors caused by the camera especially when two AR tags get too close to each other. \r\n4. Continuous time method applied to Zumy’s motion turns out to have greater coordinate errors. Discrete method is contrarily a stable way to meet our goals.\r\n5. Zumys get trapped in a local minima situation.\r\n\r\n# Improvements in the future\r\n\r\n1. Continuous time method should also work correctly. \r\n2. Zumys shouldn’t be trapped in a local minimum value.  \r\n3. Filter used for the camera can be improved.\r\n4. For \"game over\" topic, all the Zumys should stop immediately instead of finishing its current step then stop.\r\n5. Try to optimize the effect between the chasers Zummy, so that chaser can cooperate with each other to catch the runner.\r\n6. Try to apply kalman filter\r\n\r\n# Team members\r\n\r\n## Liu Yang\r\n\r\nA senior, exchange student from China, Beijing Institute of Technology majoring in Electrical Engineering\r\n\r\n## Hsiu-Wei Chang\r\n\r\nA junior, exchange student from Taiwan, National Changhua University of Education majoring in Electrical Engineering.\r\n\r\n## Rui Zhang (@z-rui)\r\n\r\nI am a junior student from [Nanjing University of Science and Technology](http://www.njust.edu.cn/). Good at Python and C programming. As an exchange student in Berkeley I took EE C106A, EE 120 and CS 61C this semester.\r\n\r\n## Yang Yue\r\n\r\nTODO\r\n\r\n# Fail videos\r\n\r\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"></script>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}